#!/usr/bin/env python3
### Copyright (C) 2015 Peter Williams <peter_ono@users.sourceforge.net>
###
### This program is free software; you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation; version 2 of the License only.
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.
###
### You should have received a copy of the GNU General Public License
### along with this program; if not, write to the Free Software
### Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

'''Command line interface for the darning patch management system'''

import sys
import argparse
import collections
import os
import datetime

import locale
import gettext

from scm_test_tree_pkg import i18n
from scm_test_tree_pkg import cmd_ifce

COUNT_FILE = ".scmtt_modify_count"

PARSER = argparse.ArgumentParser(description=_('Provide a modifiable test file tree.'))

PARSER.add_argument(
    '--version',
    action='version',
    version="0.01"
)

SUB_CMD_PARSER = PARSER.add_subparsers(title=_('commands'))

CREATE_PARSER = SUB_CMD_PARSER.add_parser(
    'create',
    description=_('Create a file tree suitable for testing "darning" functionality.'),
)

CREATE_PARSER.add_argument(
    'basedir',
    metavar=_('target directory'),
    nargs='?',
    help=_('the name of the directory (created if necessary) where test trees is to be created (default: ".").'),
    default=""
)

def create_cmd(args):
    '''Execute the "create" sub command using the supplied args'''
    return cmd_ifce.create_test_tree(args.basedir)

CREATE_PARSER.set_defaults(run_cmd=create_cmd)

MODIFY_PARSER = SUB_CMD_PARSER.add_parser(
    'modify',
    description=_('Modify the specified (or all if none specified) files.'),
)

MODIFY_PARSER.add_argument(
    '--no_newline',
    dest='opt_no_newline',
    action='store_true',
    help=_('suppress the newline at the end of the change(s).'),
)

MODIFY_PARSER.add_argument(
    '--add_tws',
    dest='opt_add_tws',
    action='store_true',
    help=_('add trailing whitespace at the beginning of the change(s).'),
)

MODIFY_PARSER.add_argument(
    'filepaths',
    metavar=_('file'),
    nargs='*',
    help=_('the name(s) of the file(s) are to be modified.'),
)

def modify_cmd(args):
    '''Execute the "modify" sub command using the supplied args'''
    return cmd_ifce.modify_files(args.filepaths, add_tws=args.opt_add_tws, no_newline=args.opt_no_newline)

MODIFY_PARSER.set_defaults(run_cmd=modify_cmd)

GUI_PARSER = SUB_CMD_PARSER.add_parser(
    'gui',
    description=_('Launch a GUI for managing a test file tree.'),
)

def gui_cmd(args):
    '''Execute the "gui" sub command using the supplied args'''
    import gi
    gi.require_version("Gtk", "3.0")
    from gi.repository import Gtk
    from scm_test_tree_pkg.gui import dialogue
    from scm_test_tree_pkg.gui import gui
    from scm_test_tree_pkg.gui import recollect
    from scm_test_tree_pkg.gui import ifce
    from scm_test_tree_pkg import config_data
    try:
        dialogue.report_any_problems(ifce.init(recollect.get(config_data.APP_NAME, "last_pgnd")))
        gui.MainWindow().show()
        Gtk.main()
    except (SystemExit, KeyboardInterrupt):
        pass
    except Exception as edata:
        dialogue.report_exception_as_error(sys.exc_info())
        return 3
    finally:
        ifce.close()
    return 0

GUI_PARSER.set_defaults(run_cmd=gui_cmd)

ARGS = PARSER.parse_args()

if hasattr(ARGS, "run_cmd"):
    sys.exit(ARGS.run_cmd(ARGS))
else:
    PARSER.print_help()
